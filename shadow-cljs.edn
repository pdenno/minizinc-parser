{:source-paths  ["src/dev" "src/main" "src/test"]
 :dependencies  [[com.taoensso/timbre  "5.1.2"] ; specifying a clojure version here is not allowed.


                 ;; I really think these don't belong here. They are shadow-cljs dependencies.
;                 [org.clojure/clojure "1.10.1"]
;                 [org.clojure/google-closure-library-third-party "0.0-20201211-3e6c510d"]
;                 [thheller/shadow-util "0.7.0"]
;                 [thheller/shadow-client "1.3.3"]
;                 [thheller/shadow-undertow "0.1.0"]
;                 [hiccup "1.0.5"]
;                 [ring/ring-core "1.8.1"]
;                 [org.graalvm.js/js "20.1.0"]
;                 [org.graalvm.js/js-scriptengine "20.1.0"]
;                 [expound "0.8.5"]
;                 [fipp "0.6.23"]
;                 [com.bhauman/cljs-test-display "0.1.1"]
;                 [com.wsscode/pathom "2.2.31"]
;                 [org.clojure/test.check "1.1.0"]
;                 [thheller/shadow-cljsjs "0.0.21"]
;                 [org.clojure/data.json "1.0.0"]
;                 [org.clojure/tools.cli "1.0.194"]
;                 [org.clojure/tools.reader "1.3.3"]
;                 [nrepl "0.7.0"]
;                 [cider/piggieback "0.5.0"]
;                 [com.cognitect/transit-clj "1.0.324"]
;                 [com.cognitect/transit-cljs "0.8.264"]
;                 [org.clojure/core.async "1.3.610"]
;                 [org.clojure/clojurescript "1.10.844"]
;                 [com.google.javascript/closure-compiler-unshaded "v20210302"]
;                 [org.clojure/google-closure-library "0.0-20201211-3e6c510d"]
                 ]

;;; I like the distinctions between library, module and framework defined here:
;;; https://stackoverflow.com/questions/4099975/difference-between-a-module-library-and-a-framework
;;; (and thus I am going with a module).
;;; An :npm-module is "intended to integrate CLJS into an existing JS project.
;;;                    The output can seamlessly integrate with existing JS tools (eg. webpack, browserify,
;;;                    babel, create-react-app, …​) with little configuration."
;;; See Section 10:  https://shadow-cljs.github.io/docs/UsersGuide.html
 :builds
 {:main
  {:target :npm-module ; Thai guy has :node-module. That was 2019. I think it is now :npm-module
   :entries [pdenno.mznp.sexp]
   :output-dir "node_modules/shadow-cljs" ; Said to be defaulted; it is not.
   #_#_:output-dir "mznp-js/pdenno.mznp.sexp" ; You can do this, but it still contains all the shadow-cljs stuff! (Maybe needed for the module?)
   ;; access the declared namespaces by using require("shadow-cljs/demo.foo") in JS. (Checked, yes, true! pdenno.mznp.{mznp,sexp,util} are in there.)
   ;; If you want your own, you use :output-dir
   #_#_:exports-var pdenno.mznp.sexp/rewrite*}}}

